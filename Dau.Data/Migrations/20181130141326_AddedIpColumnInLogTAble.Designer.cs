// <auto-generated />
using System;
using Dau.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dau.Data.Migrations
{
    [DbContext(typeof(Fees_and_facilitiesContext))]
    [Migration("20181130141326_AddedIpColumnInLogTAble")]
    partial class AddedIpColumnInLogTAble
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dau.Core.Domain.Activity.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityCategory")
                        .HasColumnName("ActivityCategory")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("ActivityLogTypeId")
                        .HasColumnName("ActivityLogTypeId");

                    b.Property<string>("ActivityPerformed")
                        .IsRequired()
                        .HasColumnName("ActivityPerformed")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnName("IpAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UserGuid")
                        .IsRequired()
                        .HasColumnName("UserGuid")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("Dau.Core.Domain.Addresses.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnName("Address1")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasColumnName("Address2")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("City")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("CountryId")
                        .HasColumnName("CountryId");

                    b.Property<int>("StateProvinceId")
                        .HasColumnName("StateProvinceId");

                    b.Property<string>("ZipPostalCode")
                        .HasColumnName("ZipPostalCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Dau.Core.Domain.API.APIClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessTokenLifeTime")
                        .HasColumnName("AccessTokenLifeTime");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("ClientId")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnName("ClientName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnName("ClientSecret")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("Enabled")
                        .HasColumnName("Enabled");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnName("RedirectUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("RefreshTokenLifetime")
                        .HasColumnName("RefreshTokenLifeTime");

                    b.HasKey("Id");

                    b.ToTable("ApiClient");
                });

            modelBuilder.Entity("Dau.Core.Domain.API.APISettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowRequestsFromSwagger")
                        .HasColumnName("AllowRequestsFromSwagger");

                    b.Property<bool>("EnableAPI")
                        .HasColumnName("EnableAPI");

                    b.HasKey("Id");

                    b.ToTable("APISettings");
                });

            modelBuilder.Entity("Dau.Core.Domain.BankAccount.AccountInformationParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("account_information_parameter");
                });

            modelBuilder.Entity("Dau.Core.Domain.BankAccount.AccountInformationParameterTranslation", b =>
                {
                    b.Property<int>("AccountInfoNonTransId")
                        .HasColumnName("account_info_non_trans_id");

                    b.Property<int>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasColumnName("parameter")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.HasKey("AccountInfoNonTransId", "LanguageId");

                    b.HasIndex("AccountInfoNonTransId")
                        .HasName("IX_account_info_non_trans_id");

                    b.HasIndex("LanguageId")
                        .HasName("IX_language_id");

                    b.ToTable("account_information_parameter_translation");
                });

            modelBuilder.Entity("Dau.Core.Domain.BankAccount.AccountParameterValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyId")
                        .HasColumnName("currency_id");

                    b.Property<int>("ParameterId")
                        .HasColumnName("parameter_id");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .HasName("IX_currency_id");

                    b.HasIndex("ParameterId")
                        .HasName("IX_parameter_id");

                    b.ToTable("account_parameter_values");
                });

            modelBuilder.Entity("Dau.Core.Domain.BankAccount.AccountParameterValuesTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<int>("AccountParamsValuesNonTransId")
                        .HasColumnName("account_params_values_non_trans_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("LanguageId", "AccountParamsValuesNonTransId");

                    b.HasIndex("AccountParamsValuesNonTransId")
                        .HasName("IX_account_params_values_non_trans_id");

                    b.HasIndex("LanguageId")
                        .HasName("IX_language_id");

                    b.ToTable("account_parameter_values_translation");
                });

            modelBuilder.Entity("Dau.Core.Domain.BankAccount.BankCurrencyTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId")
                        .HasColumnName("bank_id");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnName("currency_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("exchangeRage");

                    b.HasKey("Id");

                    b.HasIndex("BankId")
                        .HasName("IX_bank_id");

                    b.ToTable("bank_currency_table");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<bool>("IncludeInTopMenu")
                        .HasColumnName("IncludeInTopMenu");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnName("PictureUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<int>("SeoId")
                        .HasColumnName("SeoId");

                    b.HasKey("Id");

                    b.HasIndex("SeoId");

                    b.ToTable("DormitoryBlock");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryBlockTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<int>("DormitoryBlockNonTransId")
                        .HasColumnName("DormitoryBlockNonTransId");

                    b.Property<int>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DormitoryBlockNonTransId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DormitoryBlockTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn");

                    b.Property<int>("DormitoryId")
                        .HasColumnName("DormitoryId");

                    b.Property<bool>("IsApproved")
                        .HasColumnName("IsApproved");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("Message")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double>("Rating")
                        .HasColumnName("Rating");

                    b.Property<string>("ReplyText")
                        .HasColumnName("ReplyText")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnName("ReviewText")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int>("RoomId")
                        .HasColumnName("RoomId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Title")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("UserGuid")
                        .IsRequired()
                        .HasColumnName("UserGuid")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.MessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowedTokens")
                        .HasColumnName("AllowedTokens")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("AttachedStaticFile")
                        .HasColumnName("AttachedStaticFile");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("SendImmediately")
                        .HasColumnName("SendImmediately");

                    b.Property<string>("StaticFileUrl")
                        .HasColumnName("StaticFileUrl")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("MessageTemplate");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.MessageTemplateTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BCC")
                        .HasColumnName("BCC")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Body")
                        .HasColumnName("Body")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<int>("EmailAccount")
                        .HasColumnName("EmailAccount");

                    b.Property<int>("LanguageId");

                    b.Property<int>("MessageTemplateId")
                        .HasColumnName("MessageTemplateId");

                    b.Property<string>("Subject")
                        .HasColumnName("Subject")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MessageTemplateId");

                    b.ToTable("MessageTemplateTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowGuestsToVote")
                        .HasColumnName("AllowGuestsToVote");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Language")
                        .HasColumnName("Language");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<bool>("ShowOnHomePage")
                        .HasColumnName("ShowOnHomePage");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SystemKeyword")
                        .HasColumnName("SystemKeyword")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Poll");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.PollAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("NumberOfVotes")
                        .HasColumnName("NumberOfVotes");

                    b.Property<int?>("PollId");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("PollAnswers");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowGuestsToVote")
                        .HasColumnName("AllowGuestsToVote");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Language")
                        .HasColumnName("Language");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<bool>("ShowOnHomePage")
                        .HasColumnName("ShowOnHomePage");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SystemKeyword")
                        .HasColumnName("SystemKeyword")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.SurveyQuestionsAndAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnName("NumberOfParticipants");

                    b.Property<int?>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestionsAndAnswers");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccesibleWhenSiteIsClosed")
                        .HasColumnName("AccesibleWhenSiteIsClosed");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<bool>("IncludeInFooterColumn1")
                        .HasColumnName("IncludeInFooterColumn1");

                    b.Property<bool>("IncludeInFooterColumn2")
                        .HasColumnName("IncludeInFooterColumn2");

                    b.Property<bool>("IncludeInFooterColumn3")
                        .HasColumnName("IncludeInFooterColumn3");

                    b.Property<bool>("IncludeInSitemap")
                        .HasColumnName("IncludeInSitemap");

                    b.Property<bool>("IncludeInTopMenu")
                        .HasColumnName("IncludeInTopMenu");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("PasswordProtected")
                        .HasColumnName("PasswordProtected");

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<int>("SeoId")
                        .HasColumnName("SeoId");

                    b.Property<string>("SystemName")
                        .HasColumnName("SystemName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("SeoId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.TopicTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnName("Body")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<int>("LanguageId");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<int>("TopicNonTransId")
                        .HasColumnName("TopicNonTransId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TopicNonTransId");

                    b.ToTable("TopicTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.CountryInformation.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowBilling")
                        .HasColumnName("AllowBilling");

                    b.Property<bool>("AllowBooking")
                        .HasColumnName("AllowBooking");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<int>("NumericIsoCode")
                        .HasColumnName("NumericIsoCode");

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<string>("ThreeLetterIsoCode")
                        .HasColumnName("ThreeLetterIsoCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TwoLetterIsoCode")
                        .HasColumnName("TwoLetterIsoCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Dau.Core.Domain.CountryInformation.CountryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryNonTransId")
                        .HasColumnName("CountryNonTransId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CountryNonTransId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CountryTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.CountryInformation.StateAndProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnName("Abbreviation")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("CountryId");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("StateAndProvince");
                });

            modelBuilder.Entity("Dau.Core.Domain.CurrencyInformation.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .HasColumnName("CurrencyCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CustomFormatting")
                        .HasColumnName("CustomFormatting")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("DisplayLocale")
                        .HasColumnName("DisplayLocale");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<int>("Rate")
                        .HasColumnName("Rate");

                    b.Property<int>("RoundingType")
                        .HasColumnName("RoundingType");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Dau.Core.Domain.CurrencyInformation.CurrencyTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyNonTransId")
                        .HasColumnName("CurrencyNonTransId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyNonTransId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CurrencyTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoriesTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DormitoryTypeId")
                        .HasColumnName("dormitory_type_id");

                    b.Property<string>("MapLatitude")
                        .IsRequired()
                        .HasColumnName("map_latitude")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MapLongitude")
                        .IsRequired()
                        .HasColumnName("map_longitude")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("RoomPriceCurrency")
                        .IsRequired()
                        .HasColumnName("room_price_currency")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("RoomPriceCurrencySymbol")
                        .IsRequired()
                        .HasColumnName("room_price_currency_symbol")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DormitoryTypeId")
                        .HasName("IX_dormitory_type_id");

                    b.ToTable("dormitories_table");
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoriesTableTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<int>("DormitoriesTableNonTransId")
                        .HasColumnName("dormitories_table_non_trans_id");

                    b.Property<string>("DormitoryAddress")
                        .IsRequired()
                        .HasColumnName("dormitory_address")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("DormitoryName")
                        .IsRequired()
                        .HasColumnName("dormitory_name")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("GenderAllocation")
                        .IsRequired()
                        .HasColumnName("gender_allocation")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("RoomsPaymentPeriod")
                        .IsRequired()
                        .HasColumnName("rooms_payment_period")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("LanguageId", "DormitoriesTableNonTransId");

                    b.HasIndex("DormitoriesTableNonTransId")
                        .HasName("IX_dormitories_table_non_trans_id");

                    b.HasIndex("LanguageId")
                        .HasName("IX_language_id");

                    b.ToTable("dormitories_table_translation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoryBankAccountTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnName("bank_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("DormitoryId")
                        .HasColumnName("dormitory_id");

                    b.HasKey("Id");

                    b.HasIndex("DormitoryId")
                        .HasName("IX_dormitory_id");

                    b.ToTable("dormitory_bank_account_table");
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoryInformationTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DormitoryTypeId")
                        .HasColumnName("dormitory_type_id");

                    b.HasKey("Id");

                    b.HasIndex("DormitoryTypeId")
                        .HasName("IX_dormitory_type_id");

                    b.ToTable("dormitory_information_table");
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoryInformationTableTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<int>("DormitoryInfoNonTransId")
                        .HasColumnName("dormitory_info_non_trans_id");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnName("information")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("LanguageId", "DormitoryInfoNonTransId");

                    b.HasIndex("DormitoryInfoNonTransId")
                        .HasName("IX_dormitory_info_non_trans_id");

                    b.HasIndex("LanguageId")
                        .HasName("IX_language_id");

                    b.ToTable("dormitory_information_table_translation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("dormitory_type");
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoryTypeTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<int>("DormitoryTypeNonTransId")
                        .HasColumnName("dormitory_type_non_trans_id");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnName("type_name")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("LanguageId", "DormitoryTypeNonTransId");

                    b.HasIndex("DormitoryTypeNonTransId")
                        .HasName("IX_dormitory_type_non_trans_id");

                    b.HasIndex("LanguageId")
                        .HasName("IX_language_id");

                    b.ToTable("dormitory_type_translation");
                });

            modelBuilder.Entity("Dau.Core.Domain.EmailAccountInformation.EmailAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .HasColumnName("EmailAddress")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("EmailDisplayName")
                        .HasColumnName("EmailDisplayName")
                        .HasMaxLength(246)
                        .IsUnicode(false);

                    b.Property<string>("Host")
                        .HasColumnName("Host")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasColumnName("Password")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int>("Port")
                        .HasColumnName("Port");

                    b.Property<bool>("SSL")
                        .HasColumnName("SSL");

                    b.Property<bool>("UseDefaultCredentials")
                        .HasColumnName("UseDefaultCredentials");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("EmailAccount");
                });

            modelBuilder.Entity("Dau.Core.Domain.Facility.FacilityOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacilityId")
                        .HasColumnName("facility_id");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId")
                        .HasName("IX_facility_id");

                    b.ToTable("facility_option");
                });

            modelBuilder.Entity("Dau.Core.Domain.Facility.FacilityOptionTranslation", b =>
                {
                    b.Property<int>("FacilityOptionNonTransId")
                        .HasColumnName("facility_option_non_trans_id");

                    b.Property<int>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<string>("FacilityOption")
                        .IsRequired()
                        .HasColumnName("facility_option")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("FacilityOptionDescription")
                        .IsRequired()
                        .HasColumnName("facility_option_description")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("FacilityOptionNonTransId", "LanguageId");

                    b.HasIndex("FacilityOptionNonTransId")
                        .HasName("IX_facility_option_non_trans_id");

                    b.HasIndex("LanguageId")
                        .HasName("IX_language_id");

                    b.ToTable("facility_option_translation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Facility.FacilityTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacilityIconUrl")
                        .IsRequired()
                        .HasColumnName("facility_icon_url")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("facility_table");
                });

            modelBuilder.Entity("Dau.Core.Domain.Facility.FacilityTableTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<int>("FacilityTableNonTransId")
                        .HasColumnName("facility_table_non_trans_id");

                    b.Property<string>("FacilityDescription")
                        .IsRequired()
                        .HasColumnName("facility_description")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("FacilityTitle")
                        .IsRequired()
                        .HasColumnName("facility_title")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("LanguageId", "FacilityTableNonTransId");

                    b.HasIndex("FacilityTableNonTransId")
                        .HasName("IX_facility_table_non_trans_id");

                    b.HasIndex("LanguageId")
                        .HasName("IX_language_id");

                    b.ToTable("facility_table_translation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Language.LanguageTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("language_table");
                });

            modelBuilder.Entity("Dau.Core.Domain.Logging.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnName("EventID");

                    b.Property<string>("Ipaddress");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasColumnName("LogLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("Message")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("EventLog");
                });

            modelBuilder.Entity("Dau.Core.Domain.MobileAppManager.PushNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowedTokens")
                        .HasColumnName("AllowedTokens")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Body")
                        .HasColumnName("Body")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<int>("LimitedToCustomerRole")
                        .HasColumnName("LimitedToCustomerRole");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("NotificationAccount")
                        .HasColumnName("NotificationAccount");

                    b.Property<DateTime>("PlannedDateOfSending")
                        .HasColumnName("PlannedDateOfSending")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnName("Subject")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PushNotification");
                });

            modelBuilder.Entity("Dau.Core.Domain.Notifications.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Active")
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnName("Message")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int>("Priority")
                        .HasColumnName("Priority");

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Dau.Core.Domain.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Dau.Core.Domain.Promotions.Affiliate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("Active");

                    b.Property<string>("Address1")
                        .HasColumnName("Address1")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasColumnName("Address2")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("AdminComment")
                        .HasColumnName("AdminComment")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("AffiliateURL")
                        .HasColumnName("AffiliateURL")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("City");

                    b.Property<string>("Company")
                        .HasColumnName("Company")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Country");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FaxNumber");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("FriendlyURLName")
                        .HasColumnName("FriendlyURLName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("LoadOnlyWithOrders")
                        .HasColumnName("LoadOnlyWithOrders");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("StateProvince")
                        .HasColumnName("StateProvince");

                    b.Property<string>("ZipPostalCode")
                        .HasColumnName("ZipPostalCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Affiliate");
                });

            modelBuilder.Entity("Dau.Core.Domain.Promotions.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowedTokens")
                        .HasColumnName("AllowedTokens");

                    b.Property<string>("Body")
                        .HasColumnName("Body")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<int>("EmailAccount")
                        .HasColumnName("EmailAccount");

                    b.Property<int>("LimitedToCustomerRole")
                        .HasColumnName("LimitedToCustomerRole");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime>("PlannedDateOfSending")
                        .HasColumnName("PlannedDateOfSending");

                    b.Property<string>("SendTestEmailTo")
                        .HasColumnName("SendTestEmailTo")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Subject")
                        .HasColumnName("Subject")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("Dau.Core.Domain.Promotions.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CouponCode")
                        .HasColumnName("CouponCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("CumulativeWithOtherDiscounts")
                        .HasColumnName("CumulativeWithOtherDiscounts");

                    b.Property<double>("DiscountAmount")
                        .HasColumnName("DiscountAmount");

                    b.Property<int>("DiscountLimitation")
                        .HasColumnName("DiscountLimitation");

                    b.Property<string>("DiscountName")
                        .HasColumnName("DiscountName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("DiscountRequirementType")
                        .HasColumnName("DiscountRequirementType");

                    b.Property<int>("DiscountType")
                        .HasColumnName("DiscountType");

                    b.Property<bool>("RequiresCouponCode")
                        .HasColumnName("Discount_RequiresCouponCode");

                    b.Property<double>("UsePercentage")
                        .HasColumnName("UsePercentage");

                    b.Property<DateTime>("UsedDate")
                        .HasColumnName("RequiresCouponCode")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Dau.Core.Domain.Promotions.DiscountUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookingNumber");

                    b.Property<double>("BookingTotal");

                    b.Property<int?>("DiscountId");

                    b.Property<bool>("Used");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("DiscountUsage");
                });

            modelBuilder.Entity("Dau.Core.Domain.Promotions.NewsLetterSubscribers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("Active");

                    b.Property<int>("CustomerRoles")
                        .HasColumnName("CustomerRoles");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("SubscribedDate")
                        .HasColumnName("SubscribedDate");

                    b.HasKey("Id");

                    b.ToTable("NewsletterSubscribers");
                });

            modelBuilder.Entity("Dau.Core.Domain.Reservations.CancelReservationRequests", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("BookingNumber")
                        .HasColumnName("BookingNumber");

                    b.Property<int>("CancellationStatus")
                        .HasColumnName("CancellationStatus");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerComment")
                        .HasColumnName("CustomerComment")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ReasonForCancellation")
                        .HasColumnName("ReasonForCancellation")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("RequestedAction")
                        .HasColumnName("RequestedAction")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<int>("ReturnRequestStatus")
                        .HasColumnName("ReturnRequestStatus");

                    b.Property<string>("StaffNotes")
                        .HasColumnName("StaffNotes")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CancelReservationRequest");
                });

            modelBuilder.Entity("Dau.Core.Domain.Reservations.OrderNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnName("Note")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<int?>("ReservationId");

                    b.Property<bool>("ShowToCustomer")
                        .HasColumnName("ShowToCustomer");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("OrderNotes");
                });

            modelBuilder.Entity("Dau.Core.Domain.Reservations.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AffiliateId")
                        .HasColumnName("AffiliateId");

                    b.Property<int?>("BillingAddressId");

                    b.Property<int>("BillingCountry")
                        .HasColumnName("BillingCountry");

                    b.Property<string>("BillingEmail")
                        .HasColumnName("BillingEmail")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("BillingFirstName")
                        .HasColumnName("BillingFirstName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("BillingLastName")
                        .HasColumnName("BillingLastName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<double>("BookingFee")
                        .HasColumnName("BookingFee");

                    b.Property<int>("BookingNotes")
                        .HasColumnName("BookingNotes");

                    b.Property<int>("BookingNumber")
                        .HasColumnName("BookingNumber");

                    b.Property<double>("BookingOrderSubtotal")
                        .HasColumnName("BookingOrderSubtotal");

                    b.Property<int>("BookingStatus")
                        .HasColumnName("BookingStatus");

                    b.Property<double>("BookingTotal")
                        .HasColumnName("BookingTotal");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerIpAddress")
                        .HasColumnName("CustomerIpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("DormitoryId")
                        .HasColumnName("DormitoryId");

                    b.Property<bool>("IsAffiliateBooking")
                        .HasColumnName("IsAffiliateBooking");

                    b.Property<bool>("IsCancelled")
                        .HasColumnName("IsCancelled");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("PaymentMethod")
                        .HasColumnName("PaymentMethod");

                    b.Property<int>("PaymentStatus")
                        .HasColumnName("PaymentStatus");

                    b.Property<double>("Profit")
                        .HasColumnName("Profit");

                    b.Property<int>("RoomId")
                        .HasColumnName("RoomId");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Reservations.RoomReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Discount")
                        .HasColumnName("Discount");

                    b.Property<string>("Picture")
                        .HasColumnName("Picture")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<double>("Price")
                        .HasColumnName("Price");

                    b.Property<int>("Quantity")
                        .HasColumnName("Quantity");

                    b.Property<int>("RoomId")
                        .HasColumnName("RoomId");

                    b.Property<double>("Total")
                        .HasColumnName("Total");

                    b.HasKey("Id");

                    b.ToTable("RoomReservation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Room.RoomFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacilityId")
                        .HasColumnName("facility_id");

                    b.Property<int?>("FacilityOptionId")
                        .HasColumnName("facility_option_id");

                    b.Property<int>("RoomId")
                        .HasColumnName("room_id");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId")
                        .HasName("IX_facility_id");

                    b.HasIndex("RoomId")
                        .HasName("IX_room_id");

                    b.ToTable("room_facility");
                });

            modelBuilder.Entity("Dau.Core.Domain.Room.RoomTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DormitoryId")
                        .HasColumnName("dormitory_id");

                    b.Property<int>("NumRoomsLeft")
                        .HasColumnName("num_rooms_left");

                    b.Property<int>("RoomArea")
                        .HasColumnName("room_area");

                    b.Property<string>("RoomPictureUrl")
                        .IsRequired()
                        .HasColumnName("room_picture_url")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<double>("RoomPrice")
                        .HasColumnName("room_price");

                    b.Property<double>("RoomPriceInstallment")
                        .HasColumnName("room_price_installment");

                    b.HasKey("Id");

                    b.HasIndex("DormitoryId")
                        .HasName("IX_dormitory_id");

                    b.ToTable("room_table");
                });

            modelBuilder.Entity("Dau.Core.Domain.Room.RoomTableTranslation", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<int>("RoomTableNonTransId")
                        .HasColumnName("room_table_non_trans_id");

                    b.Property<string>("RoomTitle")
                        .IsRequired()
                        .HasColumnName("room_title")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnName("room_type")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.HasKey("LanguageId", "RoomTableNonTransId");

                    b.HasIndex("LanguageId")
                        .HasName("IX_language_id");

                    b.HasIndex("RoomTableNonTransId")
                        .HasName("IX_room_table_non_trans_id");

                    b.ToTable("room_table_translation");
                });

            modelBuilder.Entity("Dau.Core.Domain.SearchEngineOptimization.Seo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MetaDescription")
                        .HasColumnName("MetaDescription")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("MetaKeywords")
                        .HasColumnName("MetaKeywords")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("MetaTitle")
                        .HasColumnName("MetaTitle")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("SearchEngineFriendlyPageName")
                        .HasColumnName("SearchEngineFriendlyPageName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Seo");
                });

            modelBuilder.Entity("Dau.Core.Domain.System.MessageQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BCC")
                        .HasColumnName("BCC")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Body")
                        .HasColumnName("Body")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("CC")
                        .HasColumnName("CC")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmailAccount")
                        .HasColumnName("EmailAccount");

                    b.Property<string>("FromAddress")
                        .HasColumnName("FromAddress")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("FromName")
                        .HasColumnName("FromName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("LoadNotSentEmailsOnly")
                        .HasColumnName("LoadNotSentEmailsOnly");

                    b.Property<int>("MaximumSentAttempts")
                        .HasColumnName("MaximumSentAttempts");

                    b.Property<int>("MessagePriority")
                        .HasColumnName("MessagePriority");

                    b.Property<string>("ReplyTo")
                        .HasColumnName("ReplyTo")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ReplyToName")
                        .HasColumnName("ReplyToName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int>("SendAttempts")
                        .HasColumnName("SendAttempts");

                    b.Property<bool>("SendImmediately")
                        .HasColumnName("SendImmediately");

                    b.Property<DateTime>("SentOn")
                        .HasColumnName("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnName("Subject")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ToAddress")
                        .HasColumnName("ToAddress")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ToName")
                        .HasColumnName("ToName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("MessageQueue");
                });

            modelBuilder.Entity("Dau.Core.Domain.User.OnlineUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IpAddress")
                        .HasColumnName("IpAddress")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("LastActivity")
                        .IsRequired()
                        .HasColumnName("LastActivity")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastActivityTime")
                        .HasColumnName("LastActivityTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastVisitedPage")
                        .IsRequired()
                        .HasColumnName("LastVisitedPage")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnName("Location")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("UserInfo")
                        .HasColumnName("UserInfo")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("OnlineUsers");
                });

            modelBuilder.Entity("Dau.Core.Domain.User.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("AdminComment");

                    b.Property<int>("AffiliateId");

                    b.Property<int?>("BillingAddressId");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<bool>("Deleted");

                    b.Property<int>("DormitoryId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<DateTime>("LastActivityDateUtc");

                    b.Property<string>("LastIpAddress");

                    b.Property<DateTime?>("LastLoginDateUtc");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("NewsletterSubscription");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("RegisteredInStoreId");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("ShippingAddressId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Dau.Core.Domain.User.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Access");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSystemRole");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Dau.Core.Domain.BankAccount.AccountInformationParameterTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.BankAccount.AccountInformationParameter", "AccountInfoNonTrans")
                        .WithMany("AccountInformationParameterTranslation")
                        .HasForeignKey("AccountInfoNonTransId")
                        .HasConstraintName("FK_dbo.account_information_parameter_translation_dbo.account_information_parameter_account_info_non_trans_id");

                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("AccountInformationParameterTranslation")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_dbo.account_information_parameter_translation_dbo.language_table_language_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.BankAccount.AccountParameterValues", b =>
                {
                    b.HasOne("Dau.Core.Domain.BankAccount.BankCurrencyTable", "Currency")
                        .WithMany("AccountParameterValues")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_dbo.account_parameter_values_dbo.bank_currency_table_currency_id");

                    b.HasOne("Dau.Core.Domain.BankAccount.AccountInformationParameter", "Parameter")
                        .WithMany("AccountParameterValues")
                        .HasForeignKey("ParameterId")
                        .HasConstraintName("FK_dbo.account_parameter_values_dbo.account_information_parameter_parameter_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.BankAccount.AccountParameterValuesTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.BankAccount.AccountParameterValues", "AccountParamsValuesNonTrans")
                        .WithMany("AccountParameterValuesTranslation")
                        .HasForeignKey("AccountParamsValuesNonTransId")
                        .HasConstraintName("FK_dbo.account_parameter_values_translation_dbo.account_parameter_values_account_params_values_non_trans_id");

                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("AccountParameterValuesTranslation")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_dbo.account_parameter_values_translation_dbo.language_table_language_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.BankAccount.BankCurrencyTable", b =>
                {
                    b.HasOne("Dau.Core.Domain.Dormitory.DormitoryBankAccountTable", "Bank")
                        .WithMany("BankCurrencyTable")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_dbo.bank_currency_table_dbo.dormitory_bank_account_table_bank_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryBlock", b =>
                {
                    b.HasOne("Dau.Core.Domain.SearchEngineOptimization.Seo", "Seo")
                        .WithMany("DormitoryBlocks")
                        .HasForeignKey("SeoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryBlockTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.DormitoryBlock", "DormitoryBlockNonTrans")
                        .WithMany("DormitoryBlockTranslations")
                        .HasForeignKey("DormitoryBlockNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("DormitoryBlockTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.MessageTemplateTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("MessageTemplateTranslations")
                        .HasForeignKey("LanguageId");

                    b.HasOne("Dau.Core.Domain.ContentManagement.MessageTemplate", "MessageTemplateNonTrans")
                        .WithMany("MessageTemplateTranslations")
                        .HasForeignKey("MessageTemplateId")
                        .HasConstraintName("FK_dbo.MessageTemplateTranslation_dbo.MessageTemplate_MessageTemplateId");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.PollAnswers", b =>
                {
                    b.HasOne("Dau.Core.Domain.ContentManagement.Poll", "Poll")
                        .WithMany("PollAnswers")
                        .HasForeignKey("PollId");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.SurveyQuestionsAndAnswers", b =>
                {
                    b.HasOne("Dau.Core.Domain.ContentManagement.Survey", "Survey")
                        .WithMany("SurveyQuestionsAndAnswers")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.Topic", b =>
                {
                    b.HasOne("Dau.Core.Domain.SearchEngineOptimization.Seo", "Seo")
                        .WithMany("Topics")
                        .HasForeignKey("SeoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.TopicTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("TopicTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.ContentManagement.Topic", "TopicNonTrans")
                        .WithMany("TopicTranslations")
                        .HasForeignKey("TopicNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.CountryInformation.CountryTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.CountryInformation.Country", "CountryNonTrans")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.CountryInformation.StateAndProvince", b =>
                {
                    b.HasOne("Dau.Core.Domain.CountryInformation.Country", "Country")
                        .WithMany("StateAndProvinces")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Dau.Core.Domain.CurrencyInformation.CurrencyTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.CurrencyInformation.Currency", "CurrencyNonTrans")
                        .WithMany("CurrencyTranslations")
                        .HasForeignKey("CurrencyNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("CurrencyTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoriesTable", b =>
                {
                    b.HasOne("Dau.Core.Domain.Dormitory.DormitoryType", "DormitoryType")
                        .WithMany("DormitoriesTable")
                        .HasForeignKey("DormitoryTypeId")
                        .HasConstraintName("FK_dbo.dormitories_table_dbo.dormitory_type_dormitory_type_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoriesTableTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Dormitory.DormitoriesTable", "DormitoriesTableNonTrans")
                        .WithMany("DormitoriesTableTranslation")
                        .HasForeignKey("DormitoriesTableNonTransId")
                        .HasConstraintName("FK_dbo.dormitories_table_translation_dbo.dormitories_table_dormitories_table_non_trans_id");

                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("DormitoriesTableTranslation")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_dbo.dormitories_table_translation_dbo.language_table_language_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoryBankAccountTable", b =>
                {
                    b.HasOne("Dau.Core.Domain.Dormitory.DormitoriesTable", "Dormitory")
                        .WithMany("DormitoryBankAccountTable")
                        .HasForeignKey("DormitoryId")
                        .HasConstraintName("FK_dbo.dormitory_bank_account_table_dbo.dormitories_table_dormitory_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoryInformationTable", b =>
                {
                    b.HasOne("Dau.Core.Domain.Dormitory.DormitoryType", "DormitoryType")
                        .WithMany("DormitoryInformationTable")
                        .HasForeignKey("DormitoryTypeId")
                        .HasConstraintName("FK_dbo.dormitory_information_table_dbo.dormitory_type_dormitory_type_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoryInformationTableTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Dormitory.DormitoryInformationTable", "DormitoryInfoNonTrans")
                        .WithMany("DormitoryInformationTableTranslation")
                        .HasForeignKey("DormitoryInfoNonTransId")
                        .HasConstraintName("FK_dbo.dormitory_information_table_translation_dbo.dormitory_information_table_dormitory_info_non_trans_id");

                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("DormitoryInformationTableTranslation")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_dbo.dormitory_information_table_translation_dbo.language_table_language_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.Dormitory.DormitoryTypeTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Dormitory.DormitoryType", "DormitoryTypeNonTrans")
                        .WithMany("DormitoryTypeTranslation")
                        .HasForeignKey("DormitoryTypeNonTransId")
                        .HasConstraintName("FK_dbo.dormitory_type_translation_dbo.dormitory_type_dormitory_type_non_trans_id");

                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("DormitoryTypeTranslation")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_dbo.dormitory_type_translation_dbo.language_table_language_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.Facility.FacilityOption", b =>
                {
                    b.HasOne("Dau.Core.Domain.Facility.FacilityTable", "Facility")
                        .WithMany("FacilityOption")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FK_dbo.facility_option_dbo.facility_table_facility_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.Facility.FacilityOptionTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Facility.FacilityOption", "FacilityOptionNonTrans")
                        .WithMany("FacilityOptionTranslation")
                        .HasForeignKey("FacilityOptionNonTransId")
                        .HasConstraintName("FK_dbo.facility_option_translation_dbo.facility_option_facility_option_non_trans_id");

                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("FacilityOptionTranslation")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_dbo.facility_option_translation_dbo.language_table_language_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.Facility.FacilityTableTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Facility.FacilityTable", "FacilityTableNonTrans")
                        .WithMany("FacilityTableTranslation")
                        .HasForeignKey("FacilityTableNonTransId")
                        .HasConstraintName("FK_dbo.facility_table_translation_dbo.facility_table_facility_table_non_trans_id");

                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("FacilityTableTranslation")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_dbo.facility_table_translation_dbo.language_table_language_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.Promotions.DiscountUsage", b =>
                {
                    b.HasOne("Dau.Core.Domain.Promotions.Discount", "Discount")
                        .WithMany("DiscountUsages")
                        .HasForeignKey("DiscountId");
                });

            modelBuilder.Entity("Dau.Core.Domain.Reservations.OrderNotes", b =>
                {
                    b.HasOne("Dau.Core.Domain.Reservations.Reservation", "Reservation")
                        .WithMany("OrderNotes")
                        .HasForeignKey("ReservationId");
                });

            modelBuilder.Entity("Dau.Core.Domain.Reservations.Reservation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Addresses.Address", "BillingAddress")
                        .WithMany("Reservations")
                        .HasForeignKey("BillingAddressId");
                });

            modelBuilder.Entity("Dau.Core.Domain.Room.RoomFacility", b =>
                {
                    b.HasOne("Dau.Core.Domain.Facility.FacilityTable", "Facility")
                        .WithMany("RoomFacility")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FK_dbo.room_facility_dbo.facility_table_facility_id");

                    b.HasOne("Dau.Core.Domain.Room.RoomTable", "Room")
                        .WithMany("RoomFacility")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_dbo.room_facility_dbo.room_table_room_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.Room.RoomTable", b =>
                {
                    b.HasOne("Dau.Core.Domain.Dormitory.DormitoriesTable", "Dormitory")
                        .WithMany("RoomTable")
                        .HasForeignKey("DormitoryId")
                        .HasConstraintName("FK_dbo.room_table_dbo.dormitories_table_dormitory_id");
                });

            modelBuilder.Entity("Dau.Core.Domain.Room.RoomTableTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Language.LanguageTable", "Language")
                        .WithMany("RoomTableTranslation")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_dbo.room_table_translation_dbo.language_table_language_id");

                    b.HasOne("Dau.Core.Domain.Room.RoomTable", "RoomTableNonTrans")
                        .WithMany("RoomTableTranslation")
                        .HasForeignKey("RoomTableNonTransId")
                        .HasConstraintName("FK_dbo.room_table_translation_dbo.room_table_room_table_non_trans_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Dau.Core.Domain.User.UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dau.Core.Domain.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dau.Core.Domain.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Dau.Core.Domain.User.UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dau.Core.Domain.User.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
