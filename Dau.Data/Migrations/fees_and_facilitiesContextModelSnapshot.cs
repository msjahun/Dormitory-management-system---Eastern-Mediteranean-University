// <auto-generated />
using System;
using Dau.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dau.Data.Migrations
{
    [DbContext(typeof(Fees_and_facilitiesContext))]
    partial class Fees_and_facilitiesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dau.Core.Domain.API.APIClient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessTokenLifeTime")
                        .HasColumnName("AccessTokenLifeTime");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("ClientId")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnName("ClientName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnName("ClientSecret")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("Enabled")
                        .HasColumnName("Enabled");

                    b.Property<string>("RedirectUrl")
                        .IsRequired()
                        .HasColumnName("RedirectUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("RefreshTokenLifetime")
                        .HasColumnName("RefreshTokenLifeTime");

                    b.HasKey("Id");

                    b.ToTable("ApiClient");
                });

            modelBuilder.Entity("Dau.Core.Domain.API.APISettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowRequestsFromSwagger")
                        .HasColumnName("AllowRequestsFromSwagger");

                    b.Property<bool>("EnableAPI")
                        .HasColumnName("EnableAPI");

                    b.HasKey("Id");

                    b.ToTable("APISettings");
                });

            modelBuilder.Entity("Dau.Core.Domain.Activity.ActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityLogType");

                    b.Property<string>("ActivityPerformed");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnName("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnName("IpAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("Dau.Core.Domain.Addresses.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnName("Address1")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasColumnName("Address2")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("City")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long>("CountryId")
                        .HasColumnName("CountryId");

                    b.Property<long>("StateProvinceId")
                        .HasColumnName("StateProvinceId");

                    b.Property<string>("ZipPostalCode")
                        .HasColumnName("ZipPostalCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Dau.Core.Domain.ApiDebugLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiName");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("ParameterRecieved");

                    b.Property<string>("Reponse");

                    b.HasKey("Id");

                    b.ToTable("ApiDebugLog");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AffiliateId");

                    b.Property<long?>("BillingAddressId");

                    b.Property<double>("BookingFee");

                    b.Property<double>("BookingOrderSubtotal");

                    b.Property<long>("BookingStatusId");

                    b.Property<double>("BookingTotal");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CustomerIpAddress");

                    b.Property<int>("DaysToExpire");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("PaymentStatusId");

                    b.Property<string>("ReceiptUrl");

                    b.Property<long>("RoomId");

                    b.Property<string>("StateProvince");

                    b.Property<string>("StudentAddress1");

                    b.Property<string>("StudentAddress2");

                    b.Property<string>("UserId");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.BookingNotes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BookingId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnName("Note")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<bool>("ShowToCustomer")
                        .HasColumnName("ShowToCustomer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingNotes");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.BookingStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.HasKey("Id");

                    b.ToTable("BookingStatus");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.BookingStatusTranslation", b =>
                {
                    b.Property<long>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<long>("BookingStatusNonTransId")
                        .HasColumnName("BookingStatusNonTransId");

                    b.Property<string>("BookingStatus");

                    b.Property<long>("Id");

                    b.HasKey("LanguageId", "BookingStatusNonTransId");

                    b.HasIndex("BookingStatusNonTransId");

                    b.ToTable("BookingStatusTranslations");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.CancelBookingRequests", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BookingId");

                    b.Property<int>("CancellationStatus")
                        .HasColumnName("CancellationStatus");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerComment")
                        .HasColumnName("CustomerComment")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerId")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ReasonForCancellation")
                        .HasColumnName("ReasonForCancellation")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("RequestedAction")
                        .HasColumnName("RequestedAction")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<int>("ReturnRequestStatus")
                        .HasColumnName("ReturnRequestStatus");

                    b.Property<string>("StaffNotes")
                        .HasColumnName("StaffNotes")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CancelBookingRequest");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RoomId");

                    b.Property<long>("SemesterPeriodId");

                    b.Property<double>("TotalAmount");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("SemesterPeriodId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.PaymentStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.PaymentStatusTranslation", b =>
                {
                    b.Property<long>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<long>("PaymentStatusNonTransId")
                        .HasColumnName("PaymentStatusNonTransId");

                    b.Property<long>("Id");

                    b.Property<string>("PaymentStatus");

                    b.HasKey("LanguageId", "PaymentStatusNonTransId");

                    b.HasIndex("PaymentStatusNonTransId");

                    b.ToTable("PaymentStatusTranslations");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.SemesterPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsCurrentSemester");

                    b.Property<bool>("IsNextSemester");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("SemesterPeriod");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.SemesterPeriodTranslation", b =>
                {
                    b.Property<long>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<long>("SemesterPeriodNonTransId")
                        .HasColumnName("SemesterPeriodNonTransId");

                    b.Property<long>("Id");

                    b.Property<string>("SemesterPeriodName");

                    b.HasKey("LanguageId", "SemesterPeriodNonTransId");

                    b.HasIndex("SemesterPeriodNonTransId");

                    b.ToTable("SemesterPeriodTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.CatalogImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alt");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnName("ImageUrl")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.HasKey("Id");

                    b.ToTable("CatalogImages");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.Dormitory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment");

                    b.Property<bool>("AllowReviewsWithBookingOnly");

                    b.Property<int>("BookingLimit");

                    b.Property<int>("CancelWaitDays");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DormitoryLogoUrl");

                    b.Property<string>("DormitoryStreetAddress");

                    b.Property<long>("DormitoryTypeId");

                    b.Property<int>("LocationOnCampus");

                    b.Property<long>("MapSectionId");

                    b.Property<bool>("MarkAsNew");

                    b.Property<int>("NoOfAwards");

                    b.Property<int>("NoOfNewFacilities");

                    b.Property<int>("NoOfStaff");

                    b.Property<int>("NoOfStudents");

                    b.Property<bool>("OpenedOnSundays");

                    b.Property<bool>("Published");

                    b.Property<double>("RatingNo");

                    b.Property<int>("ReviewNo");

                    b.Property<string>("SKU");

                    b.Property<long>("SeoId");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WeekdaysClosingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WeekdaysOpeningTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WeekendsClosingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("WeekendsOpeningTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DormitoryTypeId");

                    b.HasIndex("MapSectionId");

                    b.HasIndex("SeoId");

                    b.ToTable("Dormitory");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<long>("DormitoryId");

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<long?>("SeoId");

                    b.HasKey("Id");

                    b.HasIndex("DormitoryId");

                    b.HasIndex("SeoId");

                    b.ToTable("DormitoryBlock");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryBlockTranslation", b =>
                {
                    b.Property<long>("DormitoryBlockNonTransId")
                        .HasColumnName("DormitoryBlockNonTransId");

                    b.Property<long>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<long>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("DormitoryBlockNonTransId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DormitoryBlockTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryCatalogImage", b =>
                {
                    b.Property<long>("DormitoryId");

                    b.Property<long>("CatalogImageId");

                    b.Property<long>("Id");

                    b.HasKey("DormitoryId", "CatalogImageId");

                    b.HasIndex("CatalogImageId");

                    b.ToTable("DormitoryCatalogImage");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryFeatures", b =>
                {
                    b.Property<long>("DormitoryId");

                    b.Property<long>("FeaturesId");

                    b.Property<long>("Id");

                    b.HasKey("DormitoryId", "FeaturesId");

                    b.HasIndex("FeaturesId");

                    b.ToTable("DormitoryFeatures");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryTranslation", b =>
                {
                    b.Property<long>("DormitoryNonTransId")
                        .HasColumnName("DormitoryNonTransId");

                    b.Property<long>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<string>("DormitoryDescription");

                    b.Property<string>("DormitoryName");

                    b.Property<long>("Id");

                    b.Property<string>("RatingText");

                    b.Property<string>("ShortDescription");

                    b.HasKey("DormitoryNonTransId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DormitoryTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsPublished");

                    b.HasKey("Id");

                    b.ToTable("DormitoryType");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryTypeTranslation", b =>
                {
                    b.Property<long>("DormitoryTypeNonTransId")
                        .HasColumnName("DormitoryTypeNonTransId");

                    b.Property<long>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<string>("Description");

                    b.Property<long>("Id");

                    b.Property<string>("Title");

                    b.HasKey("DormitoryTypeNonTransId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DormitoryTypeTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn");

                    b.Property<long>("DormitoryId");

                    b.Property<bool>("IsApproved")
                        .HasColumnName("IsApproved");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("Message")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double>("Rating")
                        .HasColumnName("Rating");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DormitoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment");

                    b.Property<double>("BookingFee");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DealEndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DisplayDeal");

                    b.Property<bool>("DisplayNoRoomsLeft");

                    b.Property<int>("DisplayOrder");

                    b.Property<long>("DormitoryBlockId");

                    b.Property<long>("DormitoryId");

                    b.Property<bool>("HasDeposit");

                    b.Property<bool>("MarkAsNew");

                    b.Property<int>("NoOfStudents");

                    b.Property<int>("NoRoomQuota");

                    b.Property<bool>("PaymentPerSemesterNotYear");

                    b.Property<int>("PercentageOff");

                    b.Property<double>("Price");

                    b.Property<double>("PriceOld");

                    b.Property<bool>("Published");

                    b.Property<double>("RoomCost");

                    b.Property<double>("RoomSize");

                    b.Property<string>("SKU");

                    b.Property<long?>("SeoId");

                    b.Property<bool>("ShowPrice");

                    b.Property<double>("TaxAmount");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DormitoryBlockId");

                    b.HasIndex("DormitoryId");

                    b.HasIndex("SeoId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.RoomCatalogImage", b =>
                {
                    b.Property<long>("RoomId");

                    b.Property<long>("CatalogImageId");

                    b.Property<long>("Id");

                    b.HasKey("RoomId", "CatalogImageId");

                    b.HasIndex("CatalogImageId");

                    b.ToTable("RoomCatalogImage");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.RoomFeatures", b =>
                {
                    b.Property<long>("RoomId");

                    b.Property<long>("FeaturesId");

                    b.Property<long>("Id");

                    b.HasKey("RoomId", "FeaturesId");

                    b.HasIndex("FeaturesId");

                    b.ToTable("RoomFeatures");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.RoomTranslation", b =>
                {
                    b.Property<long>("RoomNonTransId")
                        .HasColumnName("RoomNonTransId");

                    b.Property<long>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<string>("BedType");

                    b.Property<string>("GenderAllocation");

                    b.Property<long>("Id");

                    b.Property<string>("RoomName");

                    b.HasKey("RoomNonTransId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("RoomTranslationTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.MessageTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowedTokens")
                        .HasColumnName("AllowedTokens")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("AttachedStaticFile")
                        .HasColumnName("AttachedStaticFile");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("SendImmediately")
                        .HasColumnName("SendImmediately");

                    b.Property<string>("StaticFileUrl")
                        .HasColumnName("StaticFileUrl")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("MessageTemplate");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.MessageTemplateTranslation", b =>
                {
                    b.Property<long>("MessageTemplateNonTransId");

                    b.Property<long>("LanguageId");

                    b.Property<string>("BCC");

                    b.Property<string>("Body");

                    b.Property<int>("EmailAccount");

                    b.Property<long>("Id");

                    b.Property<string>("Subject");

                    b.HasKey("MessageTemplateNonTransId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("MessageTemplateTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.Poll", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowGuestsToVote")
                        .HasColumnName("AllowGuestsToVote");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Language")
                        .HasColumnName("Language");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<bool>("ShowOnHomePage")
                        .HasColumnName("ShowOnHomePage");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SystemKeyword")
                        .HasColumnName("SystemKeyword")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Poll");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.PollAnswers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int>("NumberOfVotes")
                        .HasColumnName("NumberOfVotes");

                    b.Property<long?>("PollId");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("PollAnswers");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.Survey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowGuestsToVote")
                        .HasColumnName("AllowGuestsToVote");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Language")
                        .HasColumnName("Language");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<bool>("ShowOnHomePage")
                        .HasColumnName("ShowOnHomePage");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SystemKeyword")
                        .HasColumnName("SystemKeyword")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.SurveyQuestionsAndAnswers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnName("NumberOfParticipants");

                    b.Property<long?>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestionsAndAnswers");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.Topic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccesibleWhenSiteIsClosed")
                        .HasColumnName("AccesibleWhenSiteIsClosed");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<bool>("IncludeInFooterColumn1")
                        .HasColumnName("IncludeInFooterColumn1");

                    b.Property<bool>("IncludeInFooterColumn2")
                        .HasColumnName("IncludeInFooterColumn2");

                    b.Property<bool>("IncludeInFooterColumn3")
                        .HasColumnName("IncludeInFooterColumn3");

                    b.Property<bool>("IncludeInSitemap")
                        .HasColumnName("IncludeInSitemap");

                    b.Property<bool>("IncludeInTopMenu")
                        .HasColumnName("IncludeInTopMenu");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("PasswordProtected")
                        .HasColumnName("PasswordProtected");

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<long>("SeoId")
                        .HasColumnName("SeoId");

                    b.Property<string>("SystemName")
                        .HasColumnName("SystemName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("SeoId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.TopicTranslation", b =>
                {
                    b.Property<long>("TopicNonTransId")
                        .HasColumnName("TopicNonTransId");

                    b.Property<long>("LanguageId");

                    b.Property<string>("Body")
                        .HasColumnName("Body")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<long>("Id");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.HasKey("TopicNonTransId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("TopicTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.CountryInformation.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowBilling")
                        .HasColumnName("AllowBilling");

                    b.Property<bool>("AllowBooking")
                        .HasColumnName("AllowBooking");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<int>("NumericIsoCode")
                        .HasColumnName("NumericIsoCode");

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<string>("ThreeLetterIsoCode")
                        .HasColumnName("ThreeLetterIsoCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TwoLetterIsoCode")
                        .HasColumnName("TwoLetterIsoCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Dau.Core.Domain.CountryInformation.CountryTranslation", b =>
                {
                    b.Property<int>("CountryNonTransId")
                        .HasColumnName("CountryNonTransId");

                    b.Property<long>("LanguageId");

                    b.Property<long>("CountryNonTransId1");

                    b.Property<long>("Id");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("CountryNonTransId", "LanguageId");

                    b.HasIndex("CountryNonTransId1");

                    b.HasIndex("LanguageId");

                    b.ToTable("CountryTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.CountryInformation.StateAndProvince", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnName("Abbreviation")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long?>("CountryId");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("StateAndProvince");
                });

            modelBuilder.Entity("Dau.Core.Domain.CurrencyInformation.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .HasColumnName("CurrencyCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("CustomFormatting")
                        .HasColumnName("CustomFormatting")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("DisplayLocale")
                        .HasColumnName("DisplayLocale");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<int>("Rate")
                        .HasColumnName("Rate");

                    b.Property<int>("RoundingType")
                        .HasColumnName("RoundingType");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Dau.Core.Domain.CurrencyInformation.CurrencyTranslation", b =>
                {
                    b.Property<int>("CurrencyNonTransId")
                        .HasColumnName("CurrencyNonTransId");

                    b.Property<long>("LanguageId");

                    b.Property<long>("CurrencyNonTransId1");

                    b.Property<long>("Id");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("CurrencyNonTransId", "LanguageId");

                    b.HasIndex("CurrencyNonTransId1");

                    b.HasIndex("LanguageId");

                    b.ToTable("CurrencyTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.EmailAccountInformation.EmailAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .HasColumnName("EmailAddress")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("EmailDisplayName")
                        .HasColumnName("EmailDisplayName")
                        .HasMaxLength(246)
                        .IsUnicode(false);

                    b.Property<string>("Host")
                        .HasColumnName("Host")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasColumnName("Password")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int>("Port")
                        .HasColumnName("Port");

                    b.Property<bool>("SSL")
                        .HasColumnName("SSL");

                    b.Property<bool>("UseDefaultCredentials")
                        .HasColumnName("UseDefaultCredentials");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("EmailAccount");
                });

            modelBuilder.Entity("Dau.Core.Domain.EmuMap.MapSection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<long>("MapSectionCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("MapSectionCategoryId");

                    b.ToTable("MapSection");
                });

            modelBuilder.Entity("Dau.Core.Domain.EmuMap.MapSectionCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MapSectionCategory");
                });

            modelBuilder.Entity("Dau.Core.Domain.EmuMap.MapSectionCategoryTranslation", b =>
                {
                    b.Property<long>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<long>("MapSectionCategoryNonTransId")
                        .HasColumnName("MapSectionCategoryNonTransId");

                    b.Property<string>("CategoryDescription");

                    b.Property<string>("CategoryName");

                    b.Property<long>("Id");

                    b.HasKey("LanguageId", "MapSectionCategoryNonTransId");

                    b.HasIndex("MapSectionCategoryNonTransId");

                    b.ToTable("MapSectionCategoryTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.EmuMap.MapSectionTranslation", b =>
                {
                    b.Property<long>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<long>("MapSectionNonTransId")
                        .HasColumnName("MapSectionNonTransId");

                    b.Property<long>("Id");

                    b.Property<string>("LocationName");

                    b.HasKey("LanguageId", "MapSectionNonTransId");

                    b.HasIndex("MapSectionNonTransId");

                    b.ToTable("MapSectionTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Feature.Features", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FeaturesCategoryId");

                    b.Property<int>("HitCount");

                    b.Property<string>("IconUrl");

                    b.Property<bool>("IsPublished")
                        .HasColumnName("IsPublished");

                    b.HasKey("Id");

                    b.HasIndex("FeaturesCategoryId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("Dau.Core.Domain.Feature.FeaturesCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("FeaturesCategory");
                });

            modelBuilder.Entity("Dau.Core.Domain.Feature.FeaturesCategoryTranslation", b =>
                {
                    b.Property<long>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<long>("FeaturesCategoryNonTransId")
                        .HasColumnName("FeaturesCategoryNonTransId ");

                    b.Property<string>("CategoryDescription");

                    b.Property<string>("CategoryName");

                    b.Property<long>("Id");

                    b.HasKey("LanguageId", "FeaturesCategoryNonTransId");

                    b.HasIndex("FeaturesCategoryNonTransId");

                    b.ToTable("FeaturesCategoryTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Feature.FeaturesTranslation", b =>
                {
                    b.Property<long>("LanguageId")
                        .HasColumnName("language_id");

                    b.Property<long>("FeaturesNonTransId")
                        .HasColumnName("FeaturesNonTransId");

                    b.Property<string>("FeatureDescription");

                    b.Property<string>("FeatureName");

                    b.Property<long>("Id");

                    b.HasKey("LanguageId", "FeaturesNonTransId");

                    b.HasIndex("FeaturesNonTransId");

                    b.ToTable("FeaturesTranslation");
                });

            modelBuilder.Entity("Dau.Core.Domain.Localization.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDefaultLanguage");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Language","Localization");
                });

            modelBuilder.Entity("Dau.Core.Domain.Localization.Resource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("LanguageId");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Resource","Localization");
                });

            modelBuilder.Entity("Dau.Core.Domain.LocationInformations.Locationinformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistanceText");

                    b.Property<int>("DistanceValue");

                    b.Property<long>("DormitoryId");

                    b.Property<string>("DurationText");

                    b.Property<int>("DurationValue");

                    b.Property<long>("MapSectionId");

                    b.HasKey("Id");

                    b.HasIndex("DormitoryId");

                    b.HasIndex("MapSectionId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Dau.Core.Domain.Logging.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("EventId")
                        .HasColumnName("EventID");

                    b.Property<string>("Ipaddress");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasColumnName("LogLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("Message")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("EventLog");
                });

            modelBuilder.Entity("Dau.Core.Domain.MobileAppManager.PushNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowedTokens")
                        .HasColumnName("AllowedTokens")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Body")
                        .HasColumnName("Body")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<int>("LimitedToCustomerRole")
                        .HasColumnName("LimitedToCustomerRole");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("NotificationAccount")
                        .HasColumnName("NotificationAccount");

                    b.Property<DateTime>("PlannedDateOfSending")
                        .HasColumnName("PlannedDateOfSending")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnName("Subject")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PushNotification");
                });

            modelBuilder.Entity("Dau.Core.Domain.Notifications.Announcement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Active")
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnName("Message")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int>("Priority")
                        .HasColumnName("Priority");

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Dau.Core.Domain.Notifications.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Dau.Core.Domain.Promotions.Affiliate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("Active");

                    b.Property<string>("Address1")
                        .HasColumnName("Address1")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasColumnName("Address2")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("AdminComment")
                        .HasColumnName("AdminComment")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("AffiliateURL")
                        .HasColumnName("AffiliateURL")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("City");

                    b.Property<string>("Company")
                        .HasColumnName("Company")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Country");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FaxNumber");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("FriendlyURLName")
                        .HasColumnName("FriendlyURLName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("LoadOnlyWithOrders")
                        .HasColumnName("LoadOnlyWithOrders");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("StateProvince")
                        .HasColumnName("StateProvince");

                    b.Property<string>("ZipPostalCode")
                        .HasColumnName("ZipPostalCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Affiliate");
                });

            modelBuilder.Entity("Dau.Core.Domain.Promotions.Campaign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowedTokens")
                        .HasColumnName("AllowedTokens");

                    b.Property<string>("Body")
                        .HasColumnName("Body")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<int>("EmailAccount")
                        .HasColumnName("EmailAccount");

                    b.Property<int>("LimitedToCustomerRole")
                        .HasColumnName("LimitedToCustomerRole");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime>("PlannedDateOfSending")
                        .HasColumnName("PlannedDateOfSending");

                    b.Property<string>("SendTestEmailTo")
                        .HasColumnName("SendTestEmailTo")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Subject")
                        .HasColumnName("Subject")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("Dau.Core.Domain.Promotions.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CouponCode")
                        .HasColumnName("CouponCode")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("CumulativeWithOtherDiscounts")
                        .HasColumnName("CumulativeWithOtherDiscounts");

                    b.Property<double>("DiscountAmount")
                        .HasColumnName("DiscountAmount");

                    b.Property<int>("DiscountLimitation")
                        .HasColumnName("DiscountLimitation");

                    b.Property<string>("DiscountName")
                        .HasColumnName("DiscountName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("DiscountRequirementType")
                        .HasColumnName("DiscountRequirementType");

                    b.Property<int>("DiscountType")
                        .HasColumnName("DiscountType");

                    b.Property<bool>("RequiresCouponCode")
                        .HasColumnName("Discount_RequiresCouponCode");

                    b.Property<double>("UsePercentage")
                        .HasColumnName("UsePercentage");

                    b.Property<DateTime>("UsedDate")
                        .HasColumnName("RequiresCouponCode")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Dau.Core.Domain.Promotions.DiscountUsage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookingNumber");

                    b.Property<double>("BookingTotal");

                    b.Property<long?>("DiscountId");

                    b.Property<bool>("Used");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("DiscountUsage");
                });

            modelBuilder.Entity("Dau.Core.Domain.Promotions.NewsLetterSubscribers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("Active");

                    b.Property<int>("CustomerRoles")
                        .HasColumnName("CustomerRoles");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("SubscribedDate")
                        .HasColumnName("SubscribedDate");

                    b.HasKey("Id");

                    b.ToTable("NewsletterSubscribers");
                });

            modelBuilder.Entity("Dau.Core.Domain.SearchEngineOptimization.Seo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MetaDescription")
                        .HasColumnName("MetaDescription")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("MetaKeywords")
                        .HasColumnName("MetaKeywords")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("MetaTitle")
                        .HasColumnName("MetaTitle")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("SearchEngineFriendlyPageName")
                        .HasColumnName("SearchEngineFriendlyPageName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Seo");
                });

            modelBuilder.Entity("Dau.Core.Domain.System.MessageQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BCC")
                        .HasColumnName("BCC")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("Body")
                        .HasColumnName("Body")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("CC")
                        .HasColumnName("CC")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmailAccount")
                        .HasColumnName("EmailAccount");

                    b.Property<string>("FromAddress")
                        .HasColumnName("FromAddress")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("FromName")
                        .HasColumnName("FromName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<bool>("IsSent");

                    b.Property<int>("MaximumSentAttempts")
                        .HasColumnName("MaximumSentAttempts");

                    b.Property<int>("MessagePriority")
                        .HasColumnName("MessagePriority");

                    b.Property<string>("ReplyTo")
                        .HasColumnName("ReplyTo")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ReplyToName")
                        .HasColumnName("ReplyToName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<int>("SendAttempts")
                        .HasColumnName("SendAttempts");

                    b.Property<bool>("SendImmediately")
                        .HasColumnName("SendImmediately");

                    b.Property<DateTime>("SentOn")
                        .HasColumnName("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnName("Subject")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ToAddress")
                        .HasColumnName("ToAddress")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("ToName")
                        .HasColumnName("ToName")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("MessageQueue");
                });

            modelBuilder.Entity("Dau.Core.Domain.Users.OnlineUsers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IpAddress")
                        .HasColumnName("IpAddress")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("LastActivity")
                        .IsRequired()
                        .HasColumnName("LastActivity")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastActivityTime")
                        .HasColumnName("LastActivityTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastVisitedPage")
                        .IsRequired()
                        .HasColumnName("LastVisitedPage")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnName("Location")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("UserInfo")
                        .HasColumnName("UserInfo")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("OnlineUsers");
                });

            modelBuilder.Entity("Dau.Core.Domain.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("AdminComment");

                    b.Property<long>("AffiliateId");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<bool>("Deleted");

                    b.Property<long>("DormitoryId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<DateTime>("LastActivityDateUtc");

                    b.Property<string>("LastIpAddress");

                    b.Property<DateTime?>("LastLoginDateUtc");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("NewsletterSubscription");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("ParmanentAddress");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StudentNumber");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserImageUrl");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Dau.Core.Domain.Users.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Access");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSystemRole");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Dau.Core.Domain.Users.UsersDormitory", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<long>("DormitoryId");

                    b.Property<long?>("DormitoryId1");

                    b.Property<string>("DormitoryUserId");

                    b.HasKey("UserId", "DormitoryId");

                    b.HasIndex("DormitoryUserId", "DormitoryId1");

                    b.ToTable("UsersDormitory");
                });

            modelBuilder.Entity("Dau.Core.Event.EventLogger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EventDescription");

                    b.Property<string>("EventName");

                    b.Property<string>("EventParameters");

                    b.HasKey("Id");

                    b.ToTable("EventLogger");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Dau.Core.Domain.Activity.ActivityLog", b =>
                {
                    b.HasOne("Dau.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.Booking", b =>
                {
                    b.HasOne("Dau.Core.Domain.Addresses.Address", "BillingAddress")
                        .WithMany("Bookings")
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("Dau.Core.Domain.Bookings.BookingStatus", "BookingStatus")
                        .WithMany()
                        .HasForeignKey("BookingStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Bookings.PaymentStatus", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Catalog.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.BookingNotes", b =>
                {
                    b.HasOne("Dau.Core.Domain.Bookings.Booking", "Booking")
                        .WithMany("BookingNotes")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.BookingStatusTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Bookings.BookingStatus", "BookingStatusNonTrans")
                        .WithMany("BookingStatusTranslations")
                        .HasForeignKey("BookingStatusNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.Cart", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Bookings.SemesterPeriod", "SemesterPeriod")
                        .WithMany()
                        .HasForeignKey("SemesterPeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.PaymentStatusTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Bookings.PaymentStatus", "PaymentStatusNonTrans")
                        .WithMany("PaymentStatusTranslations")
                        .HasForeignKey("PaymentStatusNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Bookings.SemesterPeriodTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Bookings.SemesterPeriod", "SemesterPeriodNonTrans")
                        .WithMany("SemesterPeriodTranslations")
                        .HasForeignKey("SemesterPeriodNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.Dormitory", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.DormitoryType", "DormitoryType")
                        .WithMany("Dormitories")
                        .HasForeignKey("DormitoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.EmuMap.MapSection", "MapSection")
                        .WithMany()
                        .HasForeignKey("MapSectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.SearchEngineOptimization.Seo", "Seo")
                        .WithMany("Dormitories")
                        .HasForeignKey("SeoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryBlock", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.Dormitory", "Dormitory")
                        .WithMany("DormitoryBlocks")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.SearchEngineOptimization.Seo")
                        .WithMany("DormitoryBlocks")
                        .HasForeignKey("SeoId");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryBlockTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.DormitoryBlock", "DormitoryBlockNonTrans")
                        .WithMany("DormitoryBlockTranslations")
                        .HasForeignKey("DormitoryBlockNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany("DormitoryBlockTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryCatalogImage", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.CatalogImage", "CatalogImage")
                        .WithMany("DormitoryCatalogImage")
                        .HasForeignKey("CatalogImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Catalog.Dormitory", "Dormitory")
                        .WithMany("DormitoryCatalogImage")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryFeatures", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.Dormitory", "Dormitory")
                        .WithMany("DormitoryFeatures")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Feature.Features", "Features")
                        .WithMany("DormitoryFeatures")
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.Dormitory", "DormitoryNonTrans")
                        .WithMany("DormitoryTranslation")
                        .HasForeignKey("DormitoryNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.DormitoryTypeTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.DormitoryType", "DormitoryTypeNonTrans")
                        .WithMany("DormitoryTypeTranslation")
                        .HasForeignKey("DormitoryTypeNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.Review", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.Dormitory", "Dormitory")
                        .WithMany("Reviews")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.Room", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.DormitoryBlock", "DormitoryBlock")
                        .WithMany("Rooms")
                        .HasForeignKey("DormitoryBlockId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dau.Core.Domain.Catalog.Dormitory", "Dormitory")
                        .WithMany("Rooms")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.SearchEngineOptimization.Seo", "Seo")
                        .WithMany("Rooms")
                        .HasForeignKey("SeoId");
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.RoomCatalogImage", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.CatalogImage", "CatalogImage")
                        .WithMany("RoomCatalogImage")
                        .HasForeignKey("CatalogImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Catalog.Room", "Room")
                        .WithMany("RoomCatalogImage")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.RoomFeatures", b =>
                {
                    b.HasOne("Dau.Core.Domain.Feature.Features", "Features")
                        .WithMany("RoomFeatures")
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Catalog.Room", "Room")
                        .WithMany("RoomFeatures")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Catalog.RoomTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Catalog.Room", "RoomNonTrans")
                        .WithMany("RoomTranslation")
                        .HasForeignKey("RoomNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.MessageTemplateTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany("MessageTemplateTranslations")
                        .HasForeignKey("LanguageId");

                    b.HasOne("Dau.Core.Domain.ContentManagement.MessageTemplate", "MessageTemplateNonTrans")
                        .WithMany("MessageTemplateTranslations")
                        .HasForeignKey("MessageTemplateNonTransId")
                        .HasConstraintName("FK_dbo.MessageTemplateTranslation_dbo.MessageTemplate_MessageTemplateId");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.PollAnswers", b =>
                {
                    b.HasOne("Dau.Core.Domain.ContentManagement.Poll", "Poll")
                        .WithMany("PollAnswers")
                        .HasForeignKey("PollId");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.SurveyQuestionsAndAnswers", b =>
                {
                    b.HasOne("Dau.Core.Domain.ContentManagement.Survey", "Survey")
                        .WithMany("SurveyQuestionsAndAnswers")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.Topic", b =>
                {
                    b.HasOne("Dau.Core.Domain.SearchEngineOptimization.Seo", "Seo")
                        .WithMany("Topics")
                        .HasForeignKey("SeoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.ContentManagement.TopicTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany("TopicTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.ContentManagement.Topic", "TopicNonTrans")
                        .WithMany("TopicTranslations")
                        .HasForeignKey("TopicNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.CountryInformation.CountryTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.CountryInformation.Country", "CountryNonTrans")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("CountryNonTransId1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany("CountryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.CountryInformation.StateAndProvince", b =>
                {
                    b.HasOne("Dau.Core.Domain.CountryInformation.Country", "Country")
                        .WithMany("StateAndProvinces")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Dau.Core.Domain.CurrencyInformation.CurrencyTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.CurrencyInformation.Currency", "CurrencyNonTrans")
                        .WithMany("CurrencyTranslations")
                        .HasForeignKey("CurrencyNonTransId1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany("CurrencyTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.EmuMap.MapSection", b =>
                {
                    b.HasOne("Dau.Core.Domain.EmuMap.MapSectionCategory", "MapSectionCategory")
                        .WithMany("MapSections")
                        .HasForeignKey("MapSectionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.EmuMap.MapSectionCategoryTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.EmuMap.MapSectionCategory", "MapSectionCategoryNonTrans")
                        .WithMany("MapSectionCategoryTranslation")
                        .HasForeignKey("MapSectionCategoryNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.EmuMap.MapSectionTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.EmuMap.MapSection", "MapSectionNonTrans")
                        .WithMany("MapSectionTranslation")
                        .HasForeignKey("MapSectionNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Feature.Features", b =>
                {
                    b.HasOne("Dau.Core.Domain.Feature.FeaturesCategory", "FeaturesCategory")
                        .WithMany("Features")
                        .HasForeignKey("FeaturesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Feature.FeaturesCategoryTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Feature.FeaturesCategory", "FeaturesCategoryNonTrans")
                        .WithMany("FeaturesCategoryTranslations")
                        .HasForeignKey("FeaturesCategoryNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany("FeaturesCategoryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Feature.FeaturesTranslation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Feature.Features", "FeaturesNonTrans")
                        .WithMany("FeaturesTranslations")
                        .HasForeignKey("FeaturesNonTransId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany("FeaturesTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.Localization.Resource", b =>
                {
                    b.HasOne("Dau.Core.Domain.Localization.Language", "Language")
                        .WithMany("Resources")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dau.Core.Domain.LocationInformations.Locationinformation", b =>
                {
                    b.HasOne("Dau.Core.Domain.Catalog.Dormitory", "Dormitory")
                        .WithMany("CloseLocations")
                        .HasForeignKey("DormitoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.EmuMap.MapSection", "MapSection")
                        .WithMany("Locationinformation")
                        .HasForeignKey("MapSectionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Dau.Core.Domain.Promotions.DiscountUsage", b =>
                {
                    b.HasOne("Dau.Core.Domain.Promotions.Discount", "Discount")
                        .WithMany("DiscountUsages")
                        .HasForeignKey("DiscountId");
                });

            modelBuilder.Entity("Dau.Core.Domain.Users.UsersDormitory", b =>
                {
                    b.HasOne("Dau.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Users.UsersDormitory", "Dormitory")
                        .WithMany()
                        .HasForeignKey("DormitoryUserId", "DormitoryId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Dau.Core.Domain.Users.UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dau.Core.Domain.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dau.Core.Domain.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Dau.Core.Domain.Users.UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dau.Core.Domain.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dau.Core.Domain.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
